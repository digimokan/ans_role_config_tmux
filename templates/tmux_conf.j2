# vim: set filetype=tmux:
# ANSIBLE-MANAGED CONFIGURATION FILE

################################################################################
# KEYBINDINGS
################################################################################

# remove all default keybindings, to start from scratch
unbind-key -a

# prefix: press this before 'bind-key' keys
set-option -g prefix '{{ keymap_prefix }}'

# pass-through prefix to virtual terminal when its pressed twice
{{ ('bind-key \'' + keymap_prefix + '\' send-prefix') if keymap_prefix_passthrough else '# do not pass-through' }}
# bind-key 'C-Space' send-prefix

# delay in mS, for processing ESC vs ESC-Keycode special sequences
set-option -s escape-time {{ tmux_escape_keysym_debounce_time_ms }}

# use 'bind-key -r' to repeat key within XX ms
set-option -g repeat-time {{ keymap_repeat_window_ms }}

################################################################################
# HELP
################################################################################

# list all 'normal mode' keybindings
bind-key '{{ keymap_help_menu }}' list-keys -T prefix

################################################################################
# COLOR PROFILE
################################################################################

# set virtual terminal type (always ends in "256color")
set-option -g default-terminal '{{ tmux_virt_term_type }}'

################################################################################
# STATUSLINE [tmux-current-pane-hostname]
################################################################################

# statusline update interval in seconds
set-option -g status-interval {{ statusline_update_interval_sec }}

# main statusline background and foreground colors
set-option -g status-style fg={{ statusline_main_color_fg }},bg={{ statusline_main_color_bg }}

# statusline left side
set-option -g status-left-length {{ statusline_left_side_length }}
set-option -g status-left '#[fg={{ statusline_left_side_cmd_ind_fg }},bg={{ statusline_left_side_cmd_ind_bg }},none]#{?client_prefix, CMD ,}'
set-option -ag status-left '#[fg={{ statusline_left_side_copy_ind_fg }},bg={{ statusline_left_side_copy_ind_bg }},none]#{?#{==:#{pane_mode},copy-mode}, COPY ,}'
set-option -ag status-left '#[fg={{ statusline_left_side_session_name_ind_fg }},bg={{ statusline_left_side_session_name_ind_bg }},bold]#{?#{m:[0-9]*,#{session_name}},, #{session_name} }'
set-option -ag status-left '#[fg={{ statusline_left_side_git_ind_fg }},bg={{ statusline_left_side_git_ind_bg }},bold]#{?#{m:NOREPO,#(cd "#{pane_current_path}"; git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "NOREPO")},, â˜ˆ #{?#{m:DETACHED,#(cd "#{pane_current_path}"; git symbolic-ref --short --quiet HEAD 2>/dev/null || echo "DETACHED")},#(cd "#{pane_current_path}"; git rev-parse --short HEAD) (detached),#(cd "#{pane_current_path}"; git symbolic-ref --short HEAD)} }'

# statusline center
set-option -g window-status-separator '  '
set-option -g window-status-format '#W'
set-option -g window-status-current-format ' #W '
set-option -g window-status-style 'fg={{ statusline_center_inactive_window_inds_fg }},bg={{ statusline_center_inactive_window_inds_bg }},bold'
set-option -g window-status-current-style 'fg={{ statusline_center_active_window_ind_fg }},bg={{ statusline_center_active_window_ind_bg }},bold'
set-option -g status-justify centre
set-window-option -g window-status-activity-style 'fg={{ statusline_center_bell_alert_ind_fg }},bold,bg={{ statusline_center_bell_alert_ind_bg }}'
set-window-option -g window-status-bell-style 'fg={{ statusline_center_bell_alert_ind_fg }},bold,bg={{ statusline_center_bell_alert_ind_bg }}'

# statusline right side
set-option -g status-right-length {{ statusline_right_side_length }}
set-option -g status-right '#[fg={{ statusline_right_side_user_host_ind_fg }},bg={{ statusline_right_side_user_host_ind_bg }},bold] #{?#{==:#{pane_current_command},ssh},#{pane_title},#(who | cut -d" " -f1)@#(hostname)} '

################################################################################
# SERVER
# A single server on system runs in the bg, independent of VTs.
# Server options set with set-option -s
################################################################################

# allow server to run even if there are no attached clients
# --> server will ALWAYS quit if there are no sessions
set-option -s exit-unattached off

################################################################################
# CLIENTS
# The virtual terms (e.g. urxvt) are the clients that tmux sessions attach to.
################################################################################

# pass terminal focus events into apps running in terminal (e.g. vim)
set-option -g focus-events on

# use tsl/fsl terminfo for window title, set window title format
set-option -g set-titles on
set-option -g set-titles-string " #{pane_title} "

################################################################################
# SESSIONS
# Each session is a tmux interface that attaches to clients and "overlays" them.
# Current session options set with set-option (add -g for all sessions)
################################################################################

# set session to be killed-on-detach when you attach to it
set-hook -g client-attached "set-option destroy-unattached on"

# do NOT kill session when it detaches IF you have renamed session explicitly
set-hook -g session-renamed "set-option destroy-unattached off"

# in the current window, switch to another session via a selection list
bind-key '{{ keymap_switch_to_any_session }}' choose-tree -s

# rename the current session (which will make it persist on close)
# Note: new terminal sessions are unnamed, and won't persist on close
bind-key '{{ keymap_rename_session }}' command-prompt "rename-session '%%'"

# destroy the current session, and all of its windows and panes
# Note: a session can be destroyed by this kill cmd, or by exiting all processes
bind-key '{{ keymap_kill_session }}' kill-session

################################################################################
# WINDOWS
# Each window is like a "browser tab" of the session.
# Window option set with set-window-option (add -g for all windows)
################################################################################

# starting window index
set-option -g base-index 1

# don't monitor for window activity, or show a msg when there is activity
set-window-option -g monitor-activity off
set-option -g visual-activity on

# if terminal for the window does a bell, highlight the window in the statusline
set-window-option -g monitor-bell {{ 'on' if statusline_highlight_window_on_bell else 'off' }}

# create a new window and switch to it
bind-key '{{ keymap_new_window }}' new-window -c '#{pane_current_path}'

# go to next window (i.e. window to the "right")
bind-key -r '{{ keymap_next_window }}' next-window

# go to previous window (i.e. window to the "left")
bind-key -r '{{ keymap_prev_window }}' previous-window

# move the current window to the left
bind-key -r '{{ keymap_move_curr_window_to_left }}' swap-window -t -1

# move the current window to the right
bind-key -r '{{ keymap_move_curr_window_to_right }}' swap-window -t +1

# rename the current window (Note: the name appears in the statusline)
bind-key '{{ keymap_rename_curr_window }}' command-prompt "rename-window '%%'"

# in the current window, switch to any session's pane via a selection list
bind-key '{{ keymap_switch_to_any_pane }}' choose-window 'join-pane -h -s "%%"'

# in the current window, switch to any session's window via a selection list
bind-key '{{ keymap_switch_to_any_window }}' choose-window 'move-window -s "%%"'

# destroy the current window, and all of its panes
bind-key '{{ keymap_kill_window }}' kill-window

################################################################################
# PANES [vim-tmux-navigator]
# Each pane is like a "split" of the current window.
################################################################################

# starting pane index
set-option -g pane-base-index 1

# inactive/active pane borders
set-window-option -g pane-border-style 'fg={{ pane_inactive_border_fg }}'
set-window-option -g pane-active-border-style 'fg={{ pane_active_border_fg }},bg={{ pane_active_border_bg }}'

bind-key 's' split-window -v -c '#{pane_current_path}'  # make new horiz split
bind-key 'v' split-window -h -c '#{pane_current_path}'  # make new vert split
bind-key 'Space' next-layout         # cycle through various preset pane layouts
bind-key -r 'Left' resize-pane -L 5  # extend current pane to left
bind-key -r 'Right' resize-pane -R 5 # extend current pane to right
bind-key -r 'Down' resize-pane -D 5  # extend current pane down
bind-key -r 'Up' resize-pane -U 5    # extend current pane up
bind-key 'y' resize-pane -Z          # full-screen toggle curr pane
bind-key 'w' break-pane              # make curr pane a new window
bind-key 'z' set-window-option 'synchronize-panes'  # type in all panes at once
bind-key 'x' kill-pane               # close curr pane (and win, if last pane)

# pane switching with awareness of vim splits
# see https://github.com/christoomey/vim-tmux-navigator for source
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

################################################################################
# CMD MODE
# enter a special "command-mode" that accepts tmux-cmd syntax
################################################################################

# use ESC to terminate cmd mode
set-option -g status-keys 'emacs'

# cmd-mode colors
set-option -g message-style 'fg={{ cmd_mode_fg }},bold,bg={{ cmd_mode_bg }}'

# enter command mode
bind-key '{{ keymap_enter_cmd_mode }}' command-prompt

################################################################################
# COPY MODE
################################################################################

# use vi-like keybindings in copy mode
set-window-option -g mode-keys vi

bind-key 'm' run-shell "tmux copy-mode; tmux send-keys g; tmux send-keys /"
bind-key '/' run-shell "tmux copy-mode; tmux send-keys ?"

bind-key 'c' copy-mode                                      # enter copy mode
bind-key 'PageUp' copy-mode -u                              # enter copy mode and page-up
bind-key -T copy-mode-vi '-' send-keys -X end-of-line       # go to end of line
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection   # start vis selection
bind-key -T copy-mode-vi 'V' send-keys -X select-line       # start vis-line selection
bind-key -T copy-mode-vi 'c' send-keys -X clear-selection   # clear selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"  # copy to sys clipboard (req xsel)
bind-key 'p' run-shell "xsel -o | tmux load-buffer -; tmux paste-buffer" # paste from sys clipboard (req xsel)
bind-key -T copy-mode-vi 'Escape' send-keys -X cancel       # leave copy mode

################################################################################
# MOUSE
################################################################################

# mouse support
set-option -g mouse off

